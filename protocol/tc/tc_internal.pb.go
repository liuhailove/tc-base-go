// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tc_internal.proto

package tc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NodeType int32

const (
	NodeType_SERVER     NodeType = 0
	NodeType_CONTROLLER NodeType = 1
	NodeType_MEDIA      NodeType = 2
	NodeType_TURN       NodeType = 4
	NodeType_SWEEPER    NodeType = 5
	NodeType_DIRECTOR   NodeType = 6
)

var NodeType_name = map[int32]string{
	0: "SERVER",
	1: "CONTROLLER",
	2: "MEDIA",
	4: "TURN",
	5: "SWEEPER",
	6: "DIRECTOR",
}

var NodeType_value = map[string]int32{
	"SERVER":     0,
	"CONTROLLER": 1,
	"MEDIA":      2,
	"TURN":       4,
	"SWEEPER":    5,
	"DIRECTOR":   6,
}

func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}

func (NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d40b3c928ff758ff, []int{0}
}

type NodeState int32

const (
	NodeState_STARTING_UP   NodeState = 0
	NodeState_SERVING       NodeState = 1
	NodeState_SHUTTING_DOWN NodeState = 2
)

var NodeState_name = map[int32]string{
	0: "STARTING_UP",
	1: "SERVING",
	2: "SHUTTING_DOWN",
}

var NodeState_value = map[string]int32{
	"STARTING_UP":   0,
	"SERVING":       1,
	"SHUTTING_DOWN": 2,
}

func (x NodeState) String() string {
	return proto.EnumName(NodeState_name, int32(x))
}

func (NodeState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d40b3c928ff758ff, []int{1}
}

type ICECandidateType int32

const (
	ICECandidateType_ICT_NONE ICECandidateType = 0
	ICECandidateType_ICT_TCP  ICECandidateType = 1
	ICECandidateType_ICT_TLS  ICECandidateType = 2
)

var ICECandidateType_name = map[int32]string{
	0: "ICT_NONE",
	1: "ICT_TCP",
	2: "ICT_TLS",
}

var ICECandidateType_value = map[string]int32{
	"ICT_NONE": 0,
	"ICT_TCP":  1,
	"ICT_TLS":  2,
}

func (x ICECandidateType) String() string {
	return proto.EnumName(ICECandidateType_name, int32(x))
}

func (ICECandidateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d40b3c928ff758ff, []int{2}
}

type Node struct {
	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ip                   string     `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	NumCpus              uint32     `protobuf:"varint,3,opt,name=num_cpus,json=numCpus,proto3" json:"num_cpus,omitempty"`
	Stats                *NodeStats `protobuf:"bytes,4,opt,name=stats,proto3" json:"stats,omitempty"`
	Type                 NodeType   `protobuf:"varint,5,opt,name=type,proto3,enum=tc.NodeType" json:"type,omitempty"`
	State                NodeState  `protobuf:"varint,6,opt,name=state,proto3,enum=tc.NodeState" json:"state,omitempty"`
	Region               string     `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_d40b3c928ff758ff, []int{0}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Node) GetNumCpus() uint32 {
	if m != nil {
		return m.NumCpus
	}
	return 0
}

func (m *Node) GetStats() *NodeStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Node) GetType() NodeType {
	if m != nil {
		return m.Type
	}
	return NodeType_SERVER
}

func (m *Node) GetState() NodeState {
	if m != nil {
		return m.State
	}
	return NodeState_STARTING_UP
}

func (m *Node) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type NodeStats struct {
	// when server was started
	StartedAt int64 `protobuf:"varint,1,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// when server last reported its status
	UpdatedAt int64 `protobuf:"varint,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// room
	NumRooms                     int32   `protobuf:"varint,3,opt,name=num_rooms,json=numRooms,proto3" json:"num_rooms,omitempty"`
	NumClients                   int32   `protobuf:"varint,4,opt,name=num_clients,json=numClients,proto3" json:"num_clients,omitempty"`
	NumTracksIn                  int32   `protobuf:"varint,5,opt,name=num_tracks_in,json=numTracksIn,proto3" json:"num_tracks_in,omitempty"`
	NumTracksOut                 int32   `protobuf:"varint,6,opt,name=num_tracks_out,json=numTracksOut,proto3" json:"num_tracks_out,omitempty"`
	NumTrackPublishAttempts      int32   `protobuf:"varint,36,opt,name=num_track_publish_attempts,json=numTrackPublishAttempts,proto3" json:"num_track_publish_attempts,omitempty"`
	TrackPublishAttemptsPerSec   float32 `protobuf:"fixed32,37,opt,name=track_publish_attempts_per_sec,json=trackPublishAttemptsPerSec,proto3" json:"track_publish_attempts_per_sec,omitempty"`
	NumTrackPublishSuccess       int32   `protobuf:"varint,38,opt,name=num_track_publish_success,json=numTrackPublishSuccess,proto3" json:"num_track_publish_success,omitempty"`
	TrackPublishSuccessPerSec    float32 `protobuf:"fixed32,39,opt,name=track_publish_success_per_sec,json=trackPublishSuccessPerSec,proto3" json:"track_publish_success_per_sec,omitempty"`
	NumTrackSubscribeAttempts    int32   `protobuf:"varint,40,opt,name=num_track_subscribe_attempts,json=numTrackSubscribeAttempts,proto3" json:"num_track_subscribe_attempts,omitempty"`
	TrackSubscribeAttemptsPerSec float32 `protobuf:"fixed32,41,opt,name=track_subscribe_attempts_per_sec,json=trackSubscribeAttemptsPerSec,proto3" json:"track_subscribe_attempts_per_sec,omitempty"`
	NumTrackSubscribeSuccess     int32   `protobuf:"varint,42,opt,name=num_track_subscribe_success,json=numTrackSubscribeSuccess,proto3" json:"num_track_subscribe_success,omitempty"`
	TrackSubscribeSuccessPerSec  float32 `protobuf:"fixed32,43,opt,name=track_subscribe_success_per_sec,json=trackSubscribeSuccessPerSec,proto3" json:"track_subscribe_success_per_sec,omitempty"`
	// packet
	BytesIn          uint64  `protobuf:"varint,7,opt,name=bytes_in,json=bytesIn,proto3" json:"bytes_in,omitempty"`
	BytesOut         uint64  `protobuf:"varint,8,opt,name=bytes_out,json=bytesOut,proto3" json:"bytes_out,omitempty"`
	PacketsIn        uint64  `protobuf:"varint,9,opt,name=packets_in,json=packetsIn,proto3" json:"packets_in,omitempty"`
	PacketsOut       uint64  `protobuf:"varint,10,opt,name=packets_out,json=packetsOut,proto3" json:"packets_out,omitempty"`
	NackTotal        uint64  `protobuf:"varint,11,opt,name=nack_total,json=nackTotal,proto3" json:"nack_total,omitempty"`
	BytesInPerSec    float32 `protobuf:"fixed32,12,opt,name=bytes_in_per_sec,json=bytesInPerSec,proto3" json:"bytes_in_per_sec,omitempty"`
	BytesOutPerSec   float32 `protobuf:"fixed32,13,opt,name=bytes_out_per_sec,json=bytesOutPerSec,proto3" json:"bytes_out_per_sec,omitempty"`
	PacketsInPerSec  float32 `protobuf:"fixed32,14,opt,name=packets_in_per_sec,json=packetsInPerSec,proto3" json:"packets_in_per_sec,omitempty"`
	PacketsOutPerSec float32 `protobuf:"fixed32,15,opt,name=packets_out_per_sec,json=packetsOutPerSec,proto3" json:"packets_out_per_sec,omitempty"`
	NackPerSec       float32 `protobuf:"fixed32,16,opt,name=nack_per_sec,json=nackPerSec,proto3" json:"nack_per_sec,omitempty"`
	// system
	NumCpus                    uint32  `protobuf:"varint,17,opt,name=num_cpus,json=numCpus,proto3" json:"num_cpus,omitempty"`
	LoadAvgLast1Min            float32 `protobuf:"fixed32,18,opt,name=load_avg_last1min,json=loadAvgLast1min,proto3" json:"load_avg_last1min,omitempty"`
	LoadAvgLast5Min            float32 `protobuf:"fixed32,19,opt,name=load_avg_last5min,json=loadAvgLast5min,proto3" json:"load_avg_last5min,omitempty"`
	LoadAvgLast15Min           float32 `protobuf:"fixed32,20,opt,name=load_avg_last15min,json=loadAvgLast15min,proto3" json:"load_avg_last15min,omitempty"`
	CpuLoad                    float32 `protobuf:"fixed32,21,opt,name=cpu_load,json=cpuLoad,proto3" json:"cpu_load,omitempty"`
	MemoryLoad                 float32 `protobuf:"fixed32,33,opt,name=memory_load,json=memoryLoad,proto3" json:"memory_load,omitempty"`
	MemoryTotal                uint64  `protobuf:"varint,34,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	MemoryUsed                 uint64  `protobuf:"varint,35,opt,name=memory_used,json=memoryUsed,proto3" json:"memory_used,omitempty"`
	SysPacketsOut              uint32  `protobuf:"varint,28,opt,name=sys_packets_out,json=sysPacketsOut,proto3" json:"sys_packets_out,omitempty"`
	SysPacketsDropped          uint32  `protobuf:"varint,29,opt,name=sys_packets_dropped,json=sysPacketsDropped,proto3" json:"sys_packets_dropped,omitempty"`
	SysPacketsOutPerSec        float32 `protobuf:"fixed32,30,opt,name=sys_packets_out_per_sec,json=sysPacketsOutPerSec,proto3" json:"sys_packets_out_per_sec,omitempty"`
	SysPacketsDroppedPerSec    float32 `protobuf:"fixed32,31,opt,name=sys_packets_dropped_per_sec,json=sysPacketsDroppedPerSec,proto3" json:"sys_packets_dropped_per_sec,omitempty"`
	SysPacketsDroppedPctPerSec float32 `protobuf:"fixed32,32,opt,name=sys_packets_dropped_pct_per_sec,json=sysPacketsDroppedPctPerSec,proto3" json:"sys_packets_dropped_pct_per_sec,omitempty"`
	// retransmissions
	RetransmitBytesOut         uint64  `protobuf:"varint,22,opt,name=retransmit_bytes_out,json=retransmitBytesOut,proto3" json:"retransmit_bytes_out,omitempty"`
	RetransmitPacketsOut       uint64  `protobuf:"varint,23,opt,name=retransmit_packets_out,json=retransmitPacketsOut,proto3" json:"retransmit_packets_out,omitempty"`
	RetransmitBytesOutPerSec   float32 `protobuf:"fixed32,24,opt,name=retransmit_bytes_out_per_sec,json=retransmitBytesOutPerSec,proto3" json:"retransmit_bytes_out_per_sec,omitempty"`
	RetransmitPacketsOutPerSec float32 `protobuf:"fixed32,25,opt,name=retransmit_packets_out_per_sec,json=retransmitPacketsOutPerSec,proto3" json:"retransmit_packets_out_per_sec,omitempty"`
	// participant joins
	ParticipantSignalConnected       uint64   `protobuf:"varint,26,opt,name=participant_signal_connected,json=participantSignalConnected,proto3" json:"participant_signal_connected,omitempty"`
	ParticipantSignalConnectedPerSec float32  `protobuf:"fixed32,27,opt,name=participant_signal_connected_per_sec,json=participantSignalConnectedPerSec,proto3" json:"participant_signal_connected_per_sec,omitempty"`
	ParticipantRtcConnected          uint64   `protobuf:"varint,44,opt,name=participant_rtc_connected,json=participantRtcConnected,proto3" json:"participant_rtc_connected,omitempty"`
	ParticipantRtcConnectedPerSec    float32  `protobuf:"fixed32,45,opt,name=participant_rtc_connected_per_sec,json=participantRtcConnectedPerSec,proto3" json:"participant_rtc_connected_per_sec,omitempty"`
	ParticipantRtcInit               uint64   `protobuf:"varint,46,opt,name=participant_rtc_init,json=participantRtcInit,proto3" json:"participant_rtc_init,omitempty"`
	ParticipantRtcInitPerSec         float32  `protobuf:"fixed32,47,opt,name=participant_rtc_init_per_sec,json=participantRtcInitPerSec,proto3" json:"participant_rtc_init_per_sec,omitempty"`
	XXX_NoUnkeyedLiteral             struct{} `json:"-"`
	XXX_unrecognized                 []byte   `json:"-"`
	XXX_sizecache                    int32    `json:"-"`
}

func (m *NodeStats) Reset()         { *m = NodeStats{} }
func (m *NodeStats) String() string { return proto.CompactTextString(m) }
func (*NodeStats) ProtoMessage()    {}
func (*NodeStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_d40b3c928ff758ff, []int{1}
}

func (m *NodeStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeStats.Unmarshal(m, b)
}
func (m *NodeStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeStats.Marshal(b, m, deterministic)
}
func (m *NodeStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStats.Merge(m, src)
}
func (m *NodeStats) XXX_Size() int {
	return xxx_messageInfo_NodeStats.Size(m)
}
func (m *NodeStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStats proto.InternalMessageInfo

func (m *NodeStats) GetStartedAt() int64 {
	if m != nil {
		return m.StartedAt
	}
	return 0
}

func (m *NodeStats) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *NodeStats) GetNumRooms() int32 {
	if m != nil {
		return m.NumRooms
	}
	return 0
}

func (m *NodeStats) GetNumClients() int32 {
	if m != nil {
		return m.NumClients
	}
	return 0
}

func (m *NodeStats) GetNumTracksIn() int32 {
	if m != nil {
		return m.NumTracksIn
	}
	return 0
}

func (m *NodeStats) GetNumTracksOut() int32 {
	if m != nil {
		return m.NumTracksOut
	}
	return 0
}

func (m *NodeStats) GetNumTrackPublishAttempts() int32 {
	if m != nil {
		return m.NumTrackPublishAttempts
	}
	return 0
}

func (m *NodeStats) GetTrackPublishAttemptsPerSec() float32 {
	if m != nil {
		return m.TrackPublishAttemptsPerSec
	}
	return 0
}

func (m *NodeStats) GetNumTrackPublishSuccess() int32 {
	if m != nil {
		return m.NumTrackPublishSuccess
	}
	return 0
}

func (m *NodeStats) GetTrackPublishSuccessPerSec() float32 {
	if m != nil {
		return m.TrackPublishSuccessPerSec
	}
	return 0
}

func (m *NodeStats) GetNumTrackSubscribeAttempts() int32 {
	if m != nil {
		return m.NumTrackSubscribeAttempts
	}
	return 0
}

func (m *NodeStats) GetTrackSubscribeAttemptsPerSec() float32 {
	if m != nil {
		return m.TrackSubscribeAttemptsPerSec
	}
	return 0
}

func (m *NodeStats) GetNumTrackSubscribeSuccess() int32 {
	if m != nil {
		return m.NumTrackSubscribeSuccess
	}
	return 0
}

func (m *NodeStats) GetTrackSubscribeSuccessPerSec() float32 {
	if m != nil {
		return m.TrackSubscribeSuccessPerSec
	}
	return 0
}

func (m *NodeStats) GetBytesIn() uint64 {
	if m != nil {
		return m.BytesIn
	}
	return 0
}

func (m *NodeStats) GetBytesOut() uint64 {
	if m != nil {
		return m.BytesOut
	}
	return 0
}

func (m *NodeStats) GetPacketsIn() uint64 {
	if m != nil {
		return m.PacketsIn
	}
	return 0
}

func (m *NodeStats) GetPacketsOut() uint64 {
	if m != nil {
		return m.PacketsOut
	}
	return 0
}

func (m *NodeStats) GetNackTotal() uint64 {
	if m != nil {
		return m.NackTotal
	}
	return 0
}

func (m *NodeStats) GetBytesInPerSec() float32 {
	if m != nil {
		return m.BytesInPerSec
	}
	return 0
}

func (m *NodeStats) GetBytesOutPerSec() float32 {
	if m != nil {
		return m.BytesOutPerSec
	}
	return 0
}

func (m *NodeStats) GetPacketsInPerSec() float32 {
	if m != nil {
		return m.PacketsInPerSec
	}
	return 0
}

func (m *NodeStats) GetPacketsOutPerSec() float32 {
	if m != nil {
		return m.PacketsOutPerSec
	}
	return 0
}

func (m *NodeStats) GetNackPerSec() float32 {
	if m != nil {
		return m.NackPerSec
	}
	return 0
}

func (m *NodeStats) GetNumCpus() uint32 {
	if m != nil {
		return m.NumCpus
	}
	return 0
}

func (m *NodeStats) GetLoadAvgLast1Min() float32 {
	if m != nil {
		return m.LoadAvgLast1Min
	}
	return 0
}

func (m *NodeStats) GetLoadAvgLast5Min() float32 {
	if m != nil {
		return m.LoadAvgLast5Min
	}
	return 0
}

func (m *NodeStats) GetLoadAvgLast15Min() float32 {
	if m != nil {
		return m.LoadAvgLast15Min
	}
	return 0
}

func (m *NodeStats) GetCpuLoad() float32 {
	if m != nil {
		return m.CpuLoad
	}
	return 0
}

func (m *NodeStats) GetMemoryLoad() float32 {
	if m != nil {
		return m.MemoryLoad
	}
	return 0
}

func (m *NodeStats) GetMemoryTotal() uint64 {
	if m != nil {
		return m.MemoryTotal
	}
	return 0
}

func (m *NodeStats) GetMemoryUsed() uint64 {
	if m != nil {
		return m.MemoryUsed
	}
	return 0
}

func (m *NodeStats) GetSysPacketsOut() uint32 {
	if m != nil {
		return m.SysPacketsOut
	}
	return 0
}

func (m *NodeStats) GetSysPacketsDropped() uint32 {
	if m != nil {
		return m.SysPacketsDropped
	}
	return 0
}

func (m *NodeStats) GetSysPacketsOutPerSec() float32 {
	if m != nil {
		return m.SysPacketsOutPerSec
	}
	return 0
}

func (m *NodeStats) GetSysPacketsDroppedPerSec() float32 {
	if m != nil {
		return m.SysPacketsDroppedPerSec
	}
	return 0
}

func (m *NodeStats) GetSysPacketsDroppedPctPerSec() float32 {
	if m != nil {
		return m.SysPacketsDroppedPctPerSec
	}
	return 0
}

func (m *NodeStats) GetRetransmitBytesOut() uint64 {
	if m != nil {
		return m.RetransmitBytesOut
	}
	return 0
}

func (m *NodeStats) GetRetransmitPacketsOut() uint64 {
	if m != nil {
		return m.RetransmitPacketsOut
	}
	return 0
}

func (m *NodeStats) GetRetransmitBytesOutPerSec() float32 {
	if m != nil {
		return m.RetransmitBytesOutPerSec
	}
	return 0
}

func (m *NodeStats) GetRetransmitPacketsOutPerSec() float32 {
	if m != nil {
		return m.RetransmitPacketsOutPerSec
	}
	return 0
}

func (m *NodeStats) GetParticipantSignalConnected() uint64 {
	if m != nil {
		return m.ParticipantSignalConnected
	}
	return 0
}

func (m *NodeStats) GetParticipantSignalConnectedPerSec() float32 {
	if m != nil {
		return m.ParticipantSignalConnectedPerSec
	}
	return 0
}

func (m *NodeStats) GetParticipantRtcConnected() uint64 {
	if m != nil {
		return m.ParticipantRtcConnected
	}
	return 0
}

func (m *NodeStats) GetParticipantRtcConnectedPerSec() float32 {
	if m != nil {
		return m.ParticipantRtcConnectedPerSec
	}
	return 0
}

func (m *NodeStats) GetParticipantRtcInit() uint64 {
	if m != nil {
		return m.ParticipantRtcInit
	}
	return 0
}

func (m *NodeStats) GetParticipantRtcInitPerSec() float32 {
	if m != nil {
		return m.ParticipantRtcInitPerSec
	}
	return 0
}

// message to RTC nodes
type RTCNodeMessage struct {
	ParticipantKey    string `protobuf:"bytes,1,opt,name=participant_key,json=participantKey,proto3" json:"participant_key,omitempty"`
	SenderTime        int64  `protobuf:"varint,11,opt,name=sender_time,json=senderTime,proto3" json:"sender_time,omitempty"`
	ConnectionId      string `protobuf:"bytes,13,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ParticipantKeyB62 string `protobuf:"bytes,14,opt,name=participant_key_b62,json=participantKeyB62,proto3" json:"participant_key_b62,omitempty"`
	RoomName          string `protobuf:"bytes,15,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	Identity          string `protobuf:"bytes,16,opt,name=identity,proto3" json:"identity,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*RTCNodeMessage_StartSession
	//	*RTCNodeMessage_Request
	//	*RTCNodeMessage_RemoveParticipant
	//	*RTCNodeMessage_MuteTrack
	//	*RTCNodeMessage_UpdateParticipant
	//	*RTCNodeMessage_DeleteRoom
	//	*RTCNodeMessage_UpdateSubscriptions
	//	*RTCNodeMessage_SendData
	//	*RTCNodeMessage_UpdateRoomMetadata
	//	*RTCNodeMessage_KeepAlive
	Message              isRTCNodeMessage_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *RTCNodeMessage) Reset()         { *m = RTCNodeMessage{} }
func (m *RTCNodeMessage) String() string { return proto.CompactTextString(m) }
func (*RTCNodeMessage) ProtoMessage()    {}
func (*RTCNodeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d40b3c928ff758ff, []int{2}
}

func (m *RTCNodeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RTCNodeMessage.Unmarshal(m, b)
}
func (m *RTCNodeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RTCNodeMessage.Marshal(b, m, deterministic)
}
func (m *RTCNodeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RTCNodeMessage.Merge(m, src)
}
func (m *RTCNodeMessage) XXX_Size() int {
	return xxx_messageInfo_RTCNodeMessage.Size(m)
}
func (m *RTCNodeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RTCNodeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RTCNodeMessage proto.InternalMessageInfo

func (m *RTCNodeMessage) GetParticipantKey() string {
	if m != nil {
		return m.ParticipantKey
	}
	return ""
}

func (m *RTCNodeMessage) GetSenderTime() int64 {
	if m != nil {
		return m.SenderTime
	}
	return 0
}

func (m *RTCNodeMessage) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *RTCNodeMessage) GetParticipantKeyB62() string {
	if m != nil {
		return m.ParticipantKeyB62
	}
	return ""
}

func (m *RTCNodeMessage) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

func (m *RTCNodeMessage) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type isRTCNodeMessage_Message interface {
	isRTCNodeMessage_Message()
}

type RTCNodeMessage_StartSession struct {
	StartSession *StartSession `protobuf:"bytes,2,opt,name=start_session,json=startSession,proto3,oneof"`
}

type RTCNodeMessage_Request struct {
	Request *SignalRequest `protobuf:"bytes,3,opt,name=request,proto3,oneof"`
}

type RTCNodeMessage_RemoveParticipant struct {
	RemoveParticipant *RoomParticipantIdentity `protobuf:"bytes,4,opt,name=remove_participant,json=removeParticipant,proto3,oneof"`
}

type RTCNodeMessage_MuteTrack struct {
	MuteTrack *MuteRoomTrackRequest `protobuf:"bytes,5,opt,name=mute_track,json=muteTrack,proto3,oneof"`
}

type RTCNodeMessage_UpdateParticipant struct {
	UpdateParticipant *UpdateParticipantRequest `protobuf:"bytes,6,opt,name=update_participant,json=updateParticipant,proto3,oneof"`
}

type RTCNodeMessage_DeleteRoom struct {
	DeleteRoom *DeleteRoomRequest `protobuf:"bytes,7,opt,name=delete_room,json=deleteRoom,proto3,oneof"`
}

type RTCNodeMessage_UpdateSubscriptions struct {
	UpdateSubscriptions *UpdateSubscriptionsRequest `protobuf:"bytes,8,opt,name=update_subscriptions,json=updateSubscriptions,proto3,oneof"`
}

type RTCNodeMessage_SendData struct {
	SendData *SendDataRequest `protobuf:"bytes,9,opt,name=send_data,json=sendData,proto3,oneof"`
}

type RTCNodeMessage_UpdateRoomMetadata struct {
	UpdateRoomMetadata *UpdateRoomMetadataRequest `protobuf:"bytes,10,opt,name=update_room_metadata,json=updateRoomMetadata,proto3,oneof"`
}

type RTCNodeMessage_KeepAlive struct {
	KeepAlive *KeepAlive `protobuf:"bytes,12,opt,name=keep_alive,json=keepAlive,proto3,oneof"`
}

func (*RTCNodeMessage_StartSession) isRTCNodeMessage_Message() {}

func (*RTCNodeMessage_Request) isRTCNodeMessage_Message() {}

func (*RTCNodeMessage_RemoveParticipant) isRTCNodeMessage_Message() {}

func (*RTCNodeMessage_MuteTrack) isRTCNodeMessage_Message() {}

func (*RTCNodeMessage_UpdateParticipant) isRTCNodeMessage_Message() {}

func (*RTCNodeMessage_DeleteRoom) isRTCNodeMessage_Message() {}

func (*RTCNodeMessage_UpdateSubscriptions) isRTCNodeMessage_Message() {}

func (*RTCNodeMessage_SendData) isRTCNodeMessage_Message() {}

func (*RTCNodeMessage_UpdateRoomMetadata) isRTCNodeMessage_Message() {}

func (*RTCNodeMessage_KeepAlive) isRTCNodeMessage_Message() {}

func (m *RTCNodeMessage) GetMessage() isRTCNodeMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RTCNodeMessage) GetStartSession() *StartSession {
	if x, ok := m.GetMessage().(*RTCNodeMessage_StartSession); ok {
		return x.StartSession
	}
	return nil
}

func (m *RTCNodeMessage) GetRequest() *SignalRequest {
	if x, ok := m.GetMessage().(*RTCNodeMessage_Request); ok {
		return x.Request
	}
	return nil
}

func (m *RTCNodeMessage) GetRemoveParticipant() *RoomParticipantIdentity {
	if x, ok := m.GetMessage().(*RTCNodeMessage_RemoveParticipant); ok {
		return x.RemoveParticipant
	}
	return nil
}

func (m *RTCNodeMessage) GetMuteTrack() *MuteRoomTrackRequest {
	if x, ok := m.GetMessage().(*RTCNodeMessage_MuteTrack); ok {
		return x.MuteTrack
	}
	return nil
}

func (m *RTCNodeMessage) GetUpdateParticipant() *UpdateParticipantRequest {
	if x, ok := m.GetMessage().(*RTCNodeMessage_UpdateParticipant); ok {
		return x.UpdateParticipant
	}
	return nil
}

func (m *RTCNodeMessage) GetDeleteRoom() *DeleteRoomRequest {
	if x, ok := m.GetMessage().(*RTCNodeMessage_DeleteRoom); ok {
		return x.DeleteRoom
	}
	return nil
}

func (m *RTCNodeMessage) GetUpdateSubscriptions() *UpdateSubscriptionsRequest {
	if x, ok := m.GetMessage().(*RTCNodeMessage_UpdateSubscriptions); ok {
		return x.UpdateSubscriptions
	}
	return nil
}

func (m *RTCNodeMessage) GetSendData() *SendDataRequest {
	if x, ok := m.GetMessage().(*RTCNodeMessage_SendData); ok {
		return x.SendData
	}
	return nil
}

func (m *RTCNodeMessage) GetUpdateRoomMetadata() *UpdateRoomMetadataRequest {
	if x, ok := m.GetMessage().(*RTCNodeMessage_UpdateRoomMetadata); ok {
		return x.UpdateRoomMetadata
	}
	return nil
}

func (m *RTCNodeMessage) GetKeepAlive() *KeepAlive {
	if x, ok := m.GetMessage().(*RTCNodeMessage_KeepAlive); ok {
		return x.KeepAlive
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RTCNodeMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RTCNodeMessage_StartSession)(nil),
		(*RTCNodeMessage_Request)(nil),
		(*RTCNodeMessage_RemoveParticipant)(nil),
		(*RTCNodeMessage_MuteTrack)(nil),
		(*RTCNodeMessage_UpdateParticipant)(nil),
		(*RTCNodeMessage_DeleteRoom)(nil),
		(*RTCNodeMessage_UpdateSubscriptions)(nil),
		(*RTCNodeMessage_SendData)(nil),
		(*RTCNodeMessage_UpdateRoomMetadata)(nil),
		(*RTCNodeMessage_KeepAlive)(nil),
	}
}

// message to Signal nodes
type SignalNodeMessage struct {
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*SignalNodeMessage_Response
	//	*SignalNodeMessage_EndSession
	Message              isSignalNodeMessage_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SignalNodeMessage) Reset()         { *m = SignalNodeMessage{} }
func (m *SignalNodeMessage) String() string { return proto.CompactTextString(m) }
func (*SignalNodeMessage) ProtoMessage()    {}
func (*SignalNodeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d40b3c928ff758ff, []int{3}
}

func (m *SignalNodeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignalNodeMessage.Unmarshal(m, b)
}
func (m *SignalNodeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignalNodeMessage.Marshal(b, m, deterministic)
}
func (m *SignalNodeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalNodeMessage.Merge(m, src)
}
func (m *SignalNodeMessage) XXX_Size() int {
	return xxx_messageInfo_SignalNodeMessage.Size(m)
}
func (m *SignalNodeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalNodeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SignalNodeMessage proto.InternalMessageInfo

func (m *SignalNodeMessage) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

type isSignalNodeMessage_Message interface {
	isSignalNodeMessage_Message()
}

type SignalNodeMessage_Response struct {
	Response *SignalResponse `protobuf:"bytes,2,opt,name=response,proto3,oneof"`
}

type SignalNodeMessage_EndSession struct {
	EndSession *EndSession `protobuf:"bytes,3,opt,name=end_session,json=endSession,proto3,oneof"`
}

func (*SignalNodeMessage_Response) isSignalNodeMessage_Message() {}

func (*SignalNodeMessage_EndSession) isSignalNodeMessage_Message() {}

func (m *SignalNodeMessage) GetMessage() isSignalNodeMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SignalNodeMessage) GetResponse() *SignalResponse {
	if x, ok := m.GetMessage().(*SignalNodeMessage_Response); ok {
		return x.Response
	}
	return nil
}

func (m *SignalNodeMessage) GetEndSession() *EndSession {
	if x, ok := m.GetMessage().(*SignalNodeMessage_EndSession); ok {
		return x.EndSession
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SignalNodeMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SignalNodeMessage_Response)(nil),
		(*SignalNodeMessage_EndSession)(nil),
	}
}

type StartSession struct {
	RoomName     string `protobuf:"bytes,1,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	Identity     string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	ConnectionId string `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// if a client is reconnecting (i.e. resume instead of restart)
	Reconnect     bool        `protobuf:"varint,4,opt,name=reconnect,proto3" json:"reconnect,omitempty"`
	AutoSubscribe bool        `protobuf:"varint,9,opt,name=auto_subscribe,json=autoSubscribe,proto3" json:"auto_subscribe,omitempty"`
	Hidden        bool        `protobuf:"varint,10,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Client        *ClientInfo `protobuf:"bytes,11,opt,name=client,proto3" json:"client,omitempty"`
	Recorder      bool        `protobuf:"varint,12,opt,name=recorder,proto3" json:"recorder,omitempty"`
	Name          string      `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// A user's ClaimGrants serialized in JSON
	GrantsJson     string `protobuf:"bytes,14,opt,name=grants_json,json=grantsJson,proto3" json:"grants_json,omitempty"`
	AdaptiveStream bool   `protobuf:"varint,15,opt,name=adaptive_stream,json=adaptiveStream,proto3" json:"adaptive_stream,omitempty"`
	//if reconnect, client will set current sid
	ParticipantId        string          `protobuf:"bytes,16,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	ReconnectReason      ReconnectReason `protobuf:"varint,17,opt,name=reconnect_reason,json=reconnectReason,proto3,enum=tc.ReconnectReason" json:"reconnect_reason,omitempty"`
	SubscriberAllowPause bool            `protobuf:"varint,18,opt,name=subscriber_allow_pause,json=subscriberAllowPause,proto3" json:"subscriber_allow_pause,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StartSession) Reset()         { *m = StartSession{} }
func (m *StartSession) String() string { return proto.CompactTextString(m) }
func (*StartSession) ProtoMessage()    {}
func (*StartSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_d40b3c928ff758ff, []int{4}
}

func (m *StartSession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartSession.Unmarshal(m, b)
}
func (m *StartSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartSession.Marshal(b, m, deterministic)
}
func (m *StartSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartSession.Merge(m, src)
}
func (m *StartSession) XXX_Size() int {
	return xxx_messageInfo_StartSession.Size(m)
}
func (m *StartSession) XXX_DiscardUnknown() {
	xxx_messageInfo_StartSession.DiscardUnknown(m)
}

var xxx_messageInfo_StartSession proto.InternalMessageInfo

func (m *StartSession) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

func (m *StartSession) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *StartSession) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *StartSession) GetReconnect() bool {
	if m != nil {
		return m.Reconnect
	}
	return false
}

func (m *StartSession) GetAutoSubscribe() bool {
	if m != nil {
		return m.AutoSubscribe
	}
	return false
}

func (m *StartSession) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

func (m *StartSession) GetClient() *ClientInfo {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *StartSession) GetRecorder() bool {
	if m != nil {
		return m.Recorder
	}
	return false
}

func (m *StartSession) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StartSession) GetGrantsJson() string {
	if m != nil {
		return m.GrantsJson
	}
	return ""
}

func (m *StartSession) GetAdaptiveStream() bool {
	if m != nil {
		return m.AdaptiveStream
	}
	return false
}

func (m *StartSession) GetParticipantId() string {
	if m != nil {
		return m.ParticipantId
	}
	return ""
}

func (m *StartSession) GetReconnectReason() ReconnectReason {
	if m != nil {
		return m.ReconnectReason
	}
	return ReconnectReason_RR_UNKNOWN
}

func (m *StartSession) GetSubscriberAllowPause() bool {
	if m != nil {
		return m.SubscriberAllowPause
	}
	return false
}

type EndSession struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndSession) Reset()         { *m = EndSession{} }
func (m *EndSession) String() string { return proto.CompactTextString(m) }
func (*EndSession) ProtoMessage()    {}
func (*EndSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_d40b3c928ff758ff, []int{5}
}

func (m *EndSession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndSession.Unmarshal(m, b)
}
func (m *EndSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndSession.Marshal(b, m, deterministic)
}
func (m *EndSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndSession.Merge(m, src)
}
func (m *EndSession) XXX_Size() int {
	return xxx_messageInfo_EndSession.Size(m)
}
func (m *EndSession) XXX_DiscardUnknown() {
	xxx_messageInfo_EndSession.DiscardUnknown(m)
}

var xxx_messageInfo_EndSession proto.InternalMessageInfo

type RemoveParticipant struct {
	ParticipantId        string   `protobuf:"bytes,1,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveParticipant) Reset()         { *m = RemoveParticipant{} }
func (m *RemoveParticipant) String() string { return proto.CompactTextString(m) }
func (*RemoveParticipant) ProtoMessage()    {}
func (*RemoveParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptor_d40b3c928ff758ff, []int{6}
}

func (m *RemoveParticipant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveParticipant.Unmarshal(m, b)
}
func (m *RemoveParticipant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveParticipant.Marshal(b, m, deterministic)
}
func (m *RemoveParticipant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveParticipant.Merge(m, src)
}
func (m *RemoveParticipant) XXX_Size() int {
	return xxx_messageInfo_RemoveParticipant.Size(m)
}
func (m *RemoveParticipant) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveParticipant.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveParticipant proto.InternalMessageInfo

func (m *RemoveParticipant) GetParticipantId() string {
	if m != nil {
		return m.ParticipantId
	}
	return ""
}

type KeepAlive struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeepAlive) Reset()         { *m = KeepAlive{} }
func (m *KeepAlive) String() string { return proto.CompactTextString(m) }
func (*KeepAlive) ProtoMessage()    {}
func (*KeepAlive) Descriptor() ([]byte, []int) {
	return fileDescriptor_d40b3c928ff758ff, []int{7}
}

func (m *KeepAlive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeepAlive.Unmarshal(m, b)
}
func (m *KeepAlive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeepAlive.Marshal(b, m, deterministic)
}
func (m *KeepAlive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepAlive.Merge(m, src)
}
func (m *KeepAlive) XXX_Size() int {
	return xxx_messageInfo_KeepAlive.Size(m)
}
func (m *KeepAlive) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepAlive.DiscardUnknown(m)
}

var xxx_messageInfo_KeepAlive proto.InternalMessageInfo

// room info that should not be returned to clients
type RoomInternal struct {
	TrackEgress          *AutoTrackEgress       `protobuf:"bytes,1,opt,name=track_egress,json=trackEgress,proto3" json:"track_egress,omitempty"`
	ParticipantEgress    *AutoParticipantEgress `protobuf:"bytes,2,opt,name=participant_egress,json=participantEgress,proto3" json:"participant_egress,omitempty"`
	PlayoutDelay         *PlayoutDelay          `protobuf:"bytes,3,opt,name=playout_delay,json=playoutDelay,proto3" json:"playout_delay,omitempty"`
	SyncStreams          bool                   `protobuf:"varint,4,opt,name=sync_streams,json=syncStreams,proto3" json:"sync_streams,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RoomInternal) Reset()         { *m = RoomInternal{} }
func (m *RoomInternal) String() string { return proto.CompactTextString(m) }
func (*RoomInternal) ProtoMessage()    {}
func (*RoomInternal) Descriptor() ([]byte, []int) {
	return fileDescriptor_d40b3c928ff758ff, []int{8}
}

func (m *RoomInternal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomInternal.Unmarshal(m, b)
}
func (m *RoomInternal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomInternal.Marshal(b, m, deterministic)
}
func (m *RoomInternal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomInternal.Merge(m, src)
}
func (m *RoomInternal) XXX_Size() int {
	return xxx_messageInfo_RoomInternal.Size(m)
}
func (m *RoomInternal) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomInternal.DiscardUnknown(m)
}

var xxx_messageInfo_RoomInternal proto.InternalMessageInfo

func (m *RoomInternal) GetTrackEgress() *AutoTrackEgress {
	if m != nil {
		return m.TrackEgress
	}
	return nil
}

func (m *RoomInternal) GetParticipantEgress() *AutoParticipantEgress {
	if m != nil {
		return m.ParticipantEgress
	}
	return nil
}

func (m *RoomInternal) GetPlayoutDelay() *PlayoutDelay {
	if m != nil {
		return m.PlayoutDelay
	}
	return nil
}

func (m *RoomInternal) GetSyncStreams() bool {
	if m != nil {
		return m.SyncStreams
	}
	return false
}

type ICEConfig struct {
	PreferenceSubscriber ICECandidateType `protobuf:"varint,1,opt,name=preference_subscriber,json=preferenceSubscriber,proto3,enum=tc.ICECandidateType" json:"preference_subscriber,omitempty"`
	PreferencePublisher  ICECandidateType `protobuf:"varint,2,opt,name=preference_publisher,json=preferencePublisher,proto3,enum=tc.ICECandidateType" json:"preference_publisher,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ICEConfig) Reset()         { *m = ICEConfig{} }
func (m *ICEConfig) String() string { return proto.CompactTextString(m) }
func (*ICEConfig) ProtoMessage()    {}
func (*ICEConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d40b3c928ff758ff, []int{9}
}

func (m *ICEConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ICEConfig.Unmarshal(m, b)
}
func (m *ICEConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ICEConfig.Marshal(b, m, deterministic)
}
func (m *ICEConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICEConfig.Merge(m, src)
}
func (m *ICEConfig) XXX_Size() int {
	return xxx_messageInfo_ICEConfig.Size(m)
}
func (m *ICEConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ICEConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ICEConfig proto.InternalMessageInfo

func (m *ICEConfig) GetPreferenceSubscriber() ICECandidateType {
	if m != nil {
		return m.PreferenceSubscriber
	}
	return ICECandidateType_ICT_NONE
}

func (m *ICEConfig) GetPreferencePublisher() ICECandidateType {
	if m != nil {
		return m.PreferencePublisher
	}
	return ICECandidateType_ICT_NONE
}

func init() {
	proto.RegisterEnum("tc.NodeType", NodeType_name, NodeType_value)
	proto.RegisterEnum("tc.NodeState", NodeState_name, NodeState_value)
	proto.RegisterEnum("tc.ICECandidateType", ICECandidateType_name, ICECandidateType_value)
	proto.RegisterType((*Node)(nil), "tc.Node")
	proto.RegisterType((*NodeStats)(nil), "tc.NodeStats")
	proto.RegisterType((*RTCNodeMessage)(nil), "tc.RTCNodeMessage")
	proto.RegisterType((*SignalNodeMessage)(nil), "tc.SignalNodeMessage")
	proto.RegisterType((*StartSession)(nil), "tc.StartSession")
	proto.RegisterType((*EndSession)(nil), "tc.EndSession")
	proto.RegisterType((*RemoveParticipant)(nil), "tc.RemoveParticipant")
	proto.RegisterType((*KeepAlive)(nil), "tc.KeepAlive")
	proto.RegisterType((*RoomInternal)(nil), "tc.RoomInternal")
	proto.RegisterType((*ICEConfig)(nil), "tc.ICEConfig")
}

func init() { proto.RegisterFile("tc_internal.proto", fileDescriptor_d40b3c928ff758ff) }

var fileDescriptor_d40b3c928ff758ff = []byte{
	// 2017 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x58, 0xdd, 0x76, 0x1b, 0xb7,
	0x11, 0x36, 0x69, 0xfd, 0x90, 0xc3, 0x1f, 0x91, 0x90, 0x6c, 0xaf, 0xfe, 0x6c, 0x9a, 0x76, 0x6c,
	0xc5, 0x89, 0xe5, 0x84, 0x4d, 0xdc, 0xc6, 0x4d, 0xd3, 0x48, 0x14, 0x6b, 0xb1, 0x91, 0x28, 0x16,
	0xa4, 0x9c, 0x73, 0x7a, 0xb3, 0x07, 0xda, 0x85, 0xe5, 0xad, 0xc8, 0xdd, 0xed, 0x02, 0xab, 0x1e,
	0xbe, 0x41, 0xdf, 0xa2, 0xb7, 0x7d, 0x91, 0xbe, 0x4c, 0x2f, 0x7a, 0xdf, 0xbb, 0x1c, 0x0c, 0xb0,
	0x3f, 0x12, 0xa9, 0xdc, 0x09, 0x33, 0xdf, 0x37, 0xf3, 0x0d, 0x30, 0x80, 0x66, 0x09, 0x4d, 0xe9,
	0xd8, 0x9e, 0x2f, 0x79, 0xe4, 0xb3, 0xc9, 0x7e, 0x18, 0x05, 0x32, 0x20, 0x45, 0xe9, 0x6c, 0xad,
	0x49, 0xc7, 0x9e, 0x06, 0x2e, 0x9f, 0x08, 0x6d, 0xdc, 0xaa, 0x4a, 0xc7, 0x8e, 0xa4, 0x63, 0x56,
	0x35, 0xb5, 0x0a, 0x82, 0xa9, 0x59, 0x2a, 0x34, 0xbf, 0x8c, 0xb8, 0x30, 0xe8, 0xf6, 0x7f, 0x0a,
	0xb0, 0x34, 0x08, 0x5c, 0x4e, 0xea, 0x50, 0xf4, 0x5c, 0xab, 0xd0, 0x2a, 0xec, 0x95, 0x69, 0xd1,
	0x73, 0x71, 0x1d, 0x5a, 0x45, 0xb3, 0x0e, 0xc9, 0x26, 0x94, 0xfc, 0x78, 0x6a, 0x3b, 0x61, 0x2c,
	0xac, 0xfb, 0xad, 0xc2, 0x5e, 0x8d, 0xae, 0xfa, 0xf1, 0xb4, 0x1b, 0xc6, 0x82, 0x3c, 0x83, 0x65,
	0x21, 0x99, 0x14, 0xd6, 0x52, 0xab, 0xb0, 0x57, 0xe9, 0xd4, 0xf6, 0xa5, 0xb3, 0xaf, 0x62, 0x8e,
	0x94, 0x91, 0x6a, 0x1f, 0x69, 0xc1, 0x92, 0x9c, 0x85, 0xdc, 0x5a, 0x6e, 0x15, 0xf6, 0xea, 0x9d,
	0x6a, 0x82, 0x19, 0xcf, 0x42, 0x4e, 0xd1, 0x93, 0x84, 0xe1, 0xd6, 0x0a, 0x42, 0x6e, 0x84, 0xe1,
	0x3a, 0x0c, 0x27, 0x0f, 0x61, 0x25, 0xe2, 0x97, 0x5e, 0xe0, 0x5b, 0xab, 0x28, 0xcd, 0xac, 0xda,
	0xff, 0x6b, 0x42, 0x39, 0xcd, 0x49, 0x76, 0x01, 0x84, 0x64, 0x91, 0xe4, 0xae, 0xcd, 0x24, 0x16,
	0x75, 0x9f, 0x96, 0x8d, 0xe5, 0x40, 0x2a, 0x77, 0x1c, 0xba, 0xcc, 0xb8, 0x8b, 0xda, 0x6d, 0x2c,
	0x07, 0x92, 0x6c, 0x43, 0x59, 0x95, 0xaa, 0xb6, 0x4d, 0xd7, 0xba, 0x4c, 0x55, 0xed, 0x54, 0xad,
	0xc9, 0x13, 0xa8, 0xe0, 0x3e, 0x4c, 0x3c, 0xee, 0x9b, 0x92, 0x97, 0x29, 0xa8, 0xad, 0xd0, 0x16,
	0xd2, 0x86, 0x9a, 0x02, 0xc8, 0x88, 0x39, 0x57, 0xc2, 0xf6, 0x7c, 0xac, 0x78, 0x99, 0x2a, 0xd6,
	0x18, 0x6d, 0x7d, 0x9f, 0x3c, 0x87, 0x7a, 0x0e, 0x13, 0xc4, 0x12, 0x6b, 0x5e, 0xa6, 0xd5, 0x14,
	0x74, 0x16, 0x4b, 0xf2, 0x7b, 0xd8, 0x4a, 0x51, 0x76, 0x18, 0x5f, 0x4c, 0x3c, 0xf1, 0xc9, 0x66,
	0x52, 0xf2, 0x69, 0x28, 0x85, 0xf5, 0x1c, 0x19, 0x8f, 0x12, 0xc6, 0x50, 0xfb, 0x0f, 0x8c, 0x9b,
	0x1c, 0xc2, 0xe3, 0xc5, 0x44, 0x3b, 0xe4, 0x91, 0x2d, 0xb8, 0x63, 0x7d, 0xd6, 0x2a, 0xec, 0x15,
	0xe9, 0x96, 0x5c, 0xc0, 0x1e, 0xf2, 0x68, 0xc4, 0x1d, 0xf2, 0x1d, 0x6c, 0xce, 0x0b, 0x10, 0xb1,
	0xe3, 0x70, 0x21, 0xac, 0x17, 0x98, 0xff, 0xe1, 0xad, 0xfc, 0x23, 0xed, 0x25, 0x3f, 0xc2, 0xee,
	0x42, 0x5a, 0x9a, 0xfd, 0x25, 0x66, 0xdf, 0x94, 0xf3, 0x5c, 0x93, 0xfc, 0x8f, 0xb0, 0x93, 0x25,
	0x17, 0xf1, 0x85, 0x70, 0x22, 0xef, 0x82, 0x67, 0xf5, 0xef, 0x61, 0xfe, 0xcd, 0x24, 0xff, 0x28,
	0x41, 0xa4, 0x3b, 0xf0, 0x27, 0x68, 0xdd, 0x45, 0x4e, 0x55, 0x7c, 0x8e, 0x2a, 0x76, 0xe4, 0xc2,
	0x08, 0x46, 0xc8, 0x1f, 0x60, 0x7b, 0x91, 0x90, 0x64, 0x1f, 0x5e, 0xa1, 0x0e, 0x6b, 0x4e, 0x47,
	0xb2, 0x13, 0x47, 0xf0, 0xe4, 0x0e, 0x6a, 0xaa, 0xe2, 0x0b, 0x54, 0xb1, 0x2d, 0x17, 0xf1, 0x8d,
	0x88, 0x4d, 0x28, 0x5d, 0xcc, 0x24, 0xc7, 0x86, 0x52, 0x9d, 0xbf, 0x44, 0x57, 0x71, 0xdd, 0xf7,
	0x55, 0xbb, 0x6a, 0x97, 0xea, 0xa3, 0x12, 0xfa, 0x34, 0x56, 0xf5, 0xd0, 0x2e, 0x40, 0xc8, 0x9c,
	0x2b, 0x2e, 0x91, 0x59, 0x46, 0x6f, 0xd9, 0x58, 0xfa, 0xbe, 0xea, 0xe6, 0xc4, 0xad, 0xd8, 0x80,
	0xfe, 0x84, 0x61, 0xf8, 0xbe, 0x12, 0x2f, 0x03, 0xc9, 0x26, 0x56, 0x45, 0xf3, 0x95, 0x65, 0xac,
	0x0c, 0xe4, 0x25, 0x34, 0x12, 0x59, 0x69, 0x35, 0x55, 0xac, 0xa6, 0x66, 0xe4, 0x19, 0xfd, 0x9f,
	0x43, 0x33, 0x15, 0x99, 0x22, 0x6b, 0x88, 0xac, 0x27, 0x62, 0x0d, 0xf4, 0x0b, 0x20, 0x99, 0xe4,
	0x14, 0x5b, 0x47, 0xec, 0x5a, 0x2a, 0xdd, 0x80, 0x5f, 0xc3, 0x7a, 0xae, 0x80, 0x14, 0xbd, 0x86,
	0xe8, 0x46, 0x56, 0x88, 0x81, 0xb7, 0xa0, 0x8a, 0xe5, 0x24, 0xb8, 0x06, 0xe2, 0xb0, 0xc4, 0x6c,
	0xa3, 0xd3, 0x77, 0xae, 0x79, 0xf3, 0x9d, 0x7b, 0x05, 0xcd, 0x49, 0xc0, 0x5c, 0x9b, 0x5d, 0x5f,
	0xda, 0x13, 0x26, 0xe4, 0xd7, 0x53, 0xcf, 0xb7, 0x88, 0xd6, 0xa5, 0x1c, 0x07, 0xd7, 0x97, 0x27,
	0xc6, 0x3c, 0x87, 0xfd, 0x56, 0x61, 0xd7, 0xe7, 0xb0, 0xca, 0x4c, 0xbe, 0x04, 0x72, 0x33, 0x2e,
	0x82, 0x37, 0x74, 0x09, 0xf9, 0xc0, 0x88, 0xde, 0x84, 0x92, 0x13, 0xc6, 0xb6, 0xb2, 0x5b, 0x0f,
	0x10, 0xb3, 0xea, 0x84, 0xf1, 0x49, 0xc0, 0x5c, 0x75, 0x9a, 0x53, 0x3e, 0x0d, 0xa2, 0x99, 0xf6,
	0x3e, 0xd5, 0xc5, 0x69, 0x13, 0x02, 0x9e, 0x42, 0xd5, 0x00, 0xf4, 0x79, 0xb6, 0xf1, 0x3c, 0x0d,
	0x49, 0x9f, 0x68, 0x16, 0x23, 0x16, 0xdc, 0xb5, 0x9e, 0xe9, 0x8e, 0xd0, 0xa6, 0x73, 0xc1, 0x5d,
	0xf2, 0x02, 0xd6, 0xc4, 0x4c, 0xd8, 0xf9, 0xb6, 0xd9, 0xc1, 0x7d, 0xaa, 0x89, 0x99, 0x18, 0x66,
	0x9d, 0xb3, 0x0f, 0xeb, 0x79, 0x9c, 0x1b, 0x05, 0x61, 0xc8, 0x5d, 0x6b, 0x17, 0xb1, 0xcd, 0x0c,
	0x7b, 0xa4, 0x1d, 0xe4, 0x1b, 0x78, 0x74, 0x2b, 0x6e, 0x7a, 0x4a, 0x8f, 0xb1, 0x90, 0xf5, 0x1b,
	0xf1, 0xcd, 0x71, 0x7d, 0x0f, 0xdb, 0x0b, 0xb2, 0xa4, 0xcc, 0x27, 0xc8, 0x7c, 0x34, 0x97, 0xcd,
	0xb0, 0xbb, 0xf0, 0x64, 0x21, 0xdb, 0xc9, 0x72, 0xb7, 0xf4, 0x2b, 0x39, 0x1f, 0xc1, 0x49, 0x24,
	0x7c, 0x05, 0x1b, 0x11, 0x97, 0x11, 0xf3, 0xc5, 0xd4, 0x93, 0x76, 0x76, 0x15, 0x1f, 0xe2, 0xd6,
	0x91, 0xcc, 0x77, 0x98, 0x5c, 0xca, 0x6f, 0xe0, 0x61, 0x8e, 0x91, 0xdf, 0xc9, 0x47, 0xc8, 0xc9,
	0xc5, 0xcb, 0x6d, 0xe8, 0x0f, 0xb0, 0xb3, 0x28, 0x4f, 0xaa, 0xd4, 0x42, 0xa5, 0xd6, 0x7c, 0x3e,
	0xa3, 0xf3, 0x10, 0x1e, 0x2f, 0xce, 0x9a, 0x46, 0xd8, 0xd4, 0xb5, 0x2e, 0xca, 0x6e, 0x62, 0xfc,
	0x08, 0x3b, 0x21, 0x8b, 0xa4, 0xe7, 0x78, 0x21, 0xf3, 0xa5, 0x2d, 0xbc, 0x4b, 0x9f, 0x4d, 0x6c,
	0x27, 0xf0, 0x7d, 0xee, 0x48, 0xee, 0x5a, 0x5b, 0xa8, 0x7f, 0x2b, 0x87, 0x19, 0x21, 0xa4, 0x9b,
	0x20, 0xc8, 0x00, 0x9e, 0xff, 0x5a, 0x84, 0x54, 0xcb, 0x36, 0x6a, 0x69, 0xdd, 0x1d, 0xc9, 0x28,
	0x7a, 0x07, 0x9b, 0xf9, 0x78, 0x91, 0x74, 0x72, 0x72, 0xbe, 0x44, 0x39, 0x8f, 0x72, 0x00, 0x2a,
	0x9d, 0x4c, 0xcb, 0x31, 0x3c, 0xbd, 0x93, 0x9b, 0x0a, 0x79, 0x8d, 0x42, 0x76, 0xef, 0x88, 0x91,
	0xf5, 0xc0, 0xed, 0x48, 0x9e, 0xef, 0x49, 0x6b, 0x5f, 0xf7, 0xc0, 0x4d, 0x72, 0xdf, 0xf7, 0xf0,
	0x34, 0x17, 0x31, 0xd2, 0xb4, 0x6f, 0xf4, 0x69, 0xce, 0x33, 0x75, 0xc6, 0xf6, 0xff, 0x57, 0xa0,
	0x4e, 0xc7, 0x5d, 0x35, 0xf3, 0x9c, 0x72, 0x21, 0xd8, 0x25, 0x27, 0x2f, 0x61, 0x2d, 0x1f, 0xf2,
	0x8a, 0xcf, 0xcc, 0x3c, 0x57, 0xcf, 0x99, 0x7f, 0xe2, 0x33, 0x75, 0xc7, 0x05, 0xf7, 0x5d, 0x1e,
	0xd9, 0xd2, 0x9b, 0x72, 0x7c, 0xd5, 0xef, 0x53, 0xd0, 0xa6, 0xb1, 0x37, 0x55, 0xa3, 0x58, 0xcd,
	0x6c, 0x84, 0x17, 0xf8, 0xb6, 0xe7, 0xe2, 0x4b, 0x5d, 0xa6, 0xd5, 0xcc, 0xd8, 0x77, 0xd5, 0x05,
	0xbf, 0x95, 0xce, 0xbe, 0x78, 0xdb, 0xc1, 0x87, 0xba, 0x4c, 0x9b, 0x37, 0x53, 0x1e, 0xbe, 0xed,
	0xa8, 0xff, 0x53, 0x6a, 0xa4, 0xb2, 0x7d, 0x36, 0xe5, 0xf8, 0x40, 0x97, 0x69, 0x49, 0x19, 0x06,
	0x6c, 0xca, 0xc9, 0x16, 0x94, 0x3c, 0x97, 0xfb, 0xd2, 0x93, 0x33, 0x7c, 0x94, 0xcb, 0x34, 0x5d,
	0x93, 0xdf, 0x42, 0x0d, 0x67, 0x37, 0x5b, 0x70, 0x21, 0xd4, 0xe8, 0x57, 0xc4, 0x39, 0xb3, 0xa1,
	0x06, 0xc4, 0x91, 0x72, 0x8c, 0xb4, 0xfd, 0xf8, 0x1e, 0xad, 0x8a, 0xdc, 0x9a, 0xbc, 0x86, 0xd5,
	0x88, 0xff, 0x3d, 0xe6, 0x42, 0xe2, 0x18, 0x57, 0xe9, 0x34, 0x91, 0x82, 0x7d, 0x44, 0xb5, 0xe3,
	0xf8, 0x1e, 0x4d, 0x30, 0xe4, 0x04, 0x48, 0xc4, 0xa7, 0xc1, 0x35, 0xb7, 0x73, 0xe2, 0xcd, 0x50,
	0xbb, 0xad, 0x98, 0x6a, 0x02, 0x1c, 0x66, 0xae, 0xbe, 0x11, 0x78, 0x7c, 0x8f, 0x36, 0x35, 0x31,
	0xe7, 0x24, 0xdf, 0x01, 0x4c, 0x63, 0xc9, 0xf5, 0xdc, 0x80, 0x43, 0x60, 0xa5, 0x63, 0xa9, 0x28,
	0xa7, 0xb1, 0xe4, 0x2a, 0x12, 0x8e, 0x0b, 0x99, 0x8c, 0xb2, 0x42, 0xa3, 0x8d, 0x9c, 0x02, 0xd1,
	0xd3, 0xe8, 0x0d, 0x21, 0x2b, 0x18, 0x62, 0x47, 0x85, 0x38, 0x47, 0x6f, 0x2e, 0x5b, 0x16, 0xa6,
	0x19, 0xdf, 0xf6, 0x91, 0xdf, 0x41, 0xc5, 0xe5, 0x13, 0x2e, 0x39, 0x8e, 0xb4, 0x38, 0x3e, 0x54,
	0x3a, 0x0f, 0x54, 0x9c, 0x23, 0x34, 0x2b, 0x31, 0x59, 0x00, 0x70, 0x53, 0x23, 0x19, 0xc1, 0x86,
	0x11, 0x62, 0x86, 0x97, 0x50, 0x9d, 0xbd, 0xc0, 0x29, 0xa3, 0xd2, 0x79, 0x9c, 0x49, 0x19, 0xe5,
	0xdd, 0x59, 0xac, 0xf5, 0x78, 0xde, 0x4b, 0x3a, 0x50, 0x56, 0xad, 0x66, 0xbb, 0x4c, 0x32, 0x9c,
	0x48, 0x2a, 0x9d, 0x75, 0x3c, 0x17, 0xee, 0xbb, 0x47, 0x4c, 0xb2, 0x8c, 0x5e, 0x12, 0xc6, 0x44,
	0xfe, 0x92, 0x0a, 0xc1, 0x16, 0x9a, 0x72, 0xc9, 0x90, 0x0e, 0x48, 0xdf, 0xcd, 0x84, 0x28, 0xd9,
	0xa7, 0xc6, 0x9b, 0x05, 0x32, 0xdb, 0x99, 0x77, 0x92, 0x7d, 0x80, 0x2b, 0xce, 0x43, 0x9b, 0x4d,
	0xbc, 0x6b, 0x8e, 0x43, 0x8b, 0xf9, 0x74, 0xf9, 0x89, 0xf3, 0xf0, 0x40, 0x19, 0xd5, 0xa1, 0x5c,
	0x25, 0x8b, 0xc3, 0x32, 0xac, 0x4e, 0xf5, 0x45, 0x6b, 0xff, 0xbb, 0x00, 0x4d, 0xdd, 0x45, 0xf9,
	0xeb, 0x37, 0x77, 0x69, 0x0a, 0x0b, 0x2e, 0xcd, 0x57, 0x50, 0x8a, 0xb8, 0x08, 0x03, 0x5f, 0x70,
	0xd3, 0xc6, 0x24, 0xdf, 0x93, 0xda, 0xa3, 0x4a, 0x4f, 0x50, 0xe4, 0x6b, 0xa8, 0xa8, 0xdd, 0x4a,
	0x7a, 0x5f, 0x37, 0x72, 0x5d, 0x91, 0x7a, 0xbe, 0x9b, 0x75, 0x3e, 0xf0, 0x74, 0x95, 0x97, 0xfa,
	0xcf, 0x25, 0xa8, 0xe6, 0xef, 0xc8, 0xcd, 0x5b, 0x58, 0xf8, 0x95, 0x5b, 0x58, 0xbc, 0x75, 0x0b,
	0xe7, 0xca, 0xbb, 0xbf, 0xa0, 0xbc, 0x1d, 0x28, 0x47, 0xdc, 0x58, 0xf0, 0xe6, 0x94, 0x68, 0x66,
	0x20, 0x9f, 0x41, 0x9d, 0xc5, 0x32, 0xc8, 0x26, 0x61, 0x3c, 0xfe, 0x12, 0xad, 0x29, 0x6b, 0x3a,
	0xf8, 0xaa, 0x6f, 0xbc, 0x4f, 0x9e, 0xeb, 0x72, 0x1f, 0x8f, 0xb7, 0x44, 0xcd, 0x8a, 0xbc, 0x80,
	0x15, 0xfd, 0xd9, 0x85, 0x2f, 0x96, 0xd9, 0x04, 0xfd, 0xd9, 0xd5, 0xf7, 0x3f, 0x06, 0xd4, 0x78,
	0x55, 0x15, 0x2a, 0x67, 0xe4, 0xf2, 0x08, 0xcf, 0xb5, 0x44, 0xd3, 0x35, 0x21, 0xb0, 0x84, 0x95,
	0xeb, 0x07, 0x0d, 0xff, 0x56, 0xcf, 0xe1, 0x65, 0xc4, 0x7c, 0x29, 0xec, 0xbf, 0x89, 0xc0, 0x37,
	0x0f, 0x18, 0x68, 0xd3, 0x9f, 0x45, 0xe0, 0xab, 0x87, 0x95, 0xb9, 0x2c, 0x94, 0xde, 0x35, 0xb7,
	0x85, 0x8c, 0x38, 0x9b, 0xe2, 0xfb, 0x55, 0xa2, 0xf5, 0xc4, 0x3c, 0x42, 0xab, 0x2a, 0x30, 0xff,
	0x24, 0x7a, 0xae, 0x79, 0xcb, 0x6a, 0x61, 0xfe, 0xd5, 0x20, 0x3f, 0x40, 0x23, 0xdd, 0x14, 0x3b,
	0xe2, 0x4c, 0x65, 0x6d, 0xe2, 0x47, 0x2f, 0x5e, 0x04, 0x9a, 0xf8, 0x28, 0xba, 0xe8, 0x5a, 0x74,
	0xd3, 0xa0, 0xe6, 0x87, 0x74, 0x0b, 0x23, 0x9b, 0x4d, 0x26, 0xc1, 0x3f, 0xec, 0x90, 0xc5, 0x82,
	0xe3, 0x34, 0x5a, 0xa2, 0x1b, 0x99, 0xf7, 0x40, 0x39, 0x87, 0xca, 0xd7, 0xae, 0x02, 0x64, 0x1d,
	0xd3, 0x7e, 0x07, 0x4d, 0x3a, 0xf7, 0x66, 0xcd, 0xeb, 0x2f, 0x2c, 0xd0, 0xdf, 0xae, 0x40, 0x39,
	0xbd, 0x24, 0xed, 0xff, 0x16, 0xa0, 0xaa, 0x2e, 0x56, 0xdf, 0xfc, 0x36, 0x41, 0xde, 0x42, 0x55,
	0x7f, 0xf0, 0xe8, 0x1f, 0x1a, 0x30, 0x84, 0xb9, 0xe2, 0x07, 0xb1, 0x0c, 0xf0, 0x89, 0xeb, 0xa1,
	0x8b, 0x56, 0x64, 0xb6, 0x20, 0xc7, 0x90, 0xff, 0x3f, 0x99, 0xb0, 0xf5, 0x25, 0xd9, 0x4c, 0xd8,
	0x39, 0xb5, 0x26, 0x46, 0xfe, 0x3f, 0x8d, 0x89, 0xf4, 0x2d, 0xd4, 0xc2, 0x09, 0x9b, 0xa9, 0xd1,
	0xc6, 0xe5, 0x13, 0x36, 0x33, 0x97, 0x06, 0xff, 0x61, 0x0c, 0xb5, 0xe3, 0x48, 0xd9, 0x69, 0x35,
	0xcc, 0xad, 0xd4, 0x74, 0x2c, 0x66, 0xbe, 0x63, 0x8e, 0x58, 0x98, 0xfe, 0xad, 0x28, 0x9b, 0x3e,
	0x5f, 0xd1, 0xfe, 0x57, 0x01, 0xca, 0xfd, 0x6e, 0xaf, 0x1b, 0xf8, 0x1f, 0xbd, 0x4b, 0xd2, 0x87,
	0x07, 0x61, 0xc4, 0x3f, 0xf2, 0x88, 0xfb, 0x0e, 0xcf, 0xba, 0x3a, 0xc2, 0x92, 0xeb, 0x9d, 0x0d,
	0x95, 0x4f, 0xa1, 0x99, 0xef, 0x7a, 0xea, 0xfd, 0xc1, 0x1f, 0x3b, 0x36, 0x32, 0x4a, 0xda, 0xf2,
	0x11, 0x79, 0x0f, 0x39, 0x7b, 0xf2, 0xd1, 0xcc, 0x23, 0x2c, 0xff, 0xae, 0x48, 0xeb, 0x19, 0x63,
	0x98, 0x10, 0x5e, 0x7d, 0x80, 0x52, 0xf2, 0xbb, 0x0a, 0x01, 0x58, 0x19, 0xf5, 0xe8, 0x87, 0x1e,
	0x6d, 0xdc, 0x23, 0x75, 0x80, 0xee, 0xd9, 0x60, 0x4c, 0xcf, 0x4e, 0x4e, 0x7a, 0xb4, 0x51, 0x20,
	0x65, 0x58, 0x3e, 0xed, 0x1d, 0xf5, 0x0f, 0x1a, 0x45, 0x52, 0x82, 0xa5, 0xf1, 0x39, 0x1d, 0x34,
	0x96, 0x48, 0x05, 0x56, 0x47, 0x3f, 0xf7, 0x7a, 0xc3, 0x1e, 0x6d, 0x2c, 0x93, 0x2a, 0x94, 0x8e,
	0xfa, 0xb4, 0xd7, 0x1d, 0x9f, 0xd1, 0xc6, 0xca, 0xab, 0xef, 0xb3, 0xdf, 0x57, 0x38, 0x59, 0x83,
	0xca, 0x68, 0x7c, 0x40, 0xc7, 0xfd, 0xc1, 0x7b, 0xfb, 0x7c, 0xd8, 0xb8, 0x87, 0xc4, 0x1e, 0xfd,
	0xd0, 0x1f, 0xbc, 0x6f, 0x14, 0x48, 0x13, 0x6a, 0xa3, 0xe3, 0xf3, 0x31, 0x7a, 0x8f, 0xce, 0x7e,
	0x1e, 0x34, 0x8a, 0xaf, 0xde, 0x41, 0xe3, 0xb6, 0x7c, 0x15, 0xbf, 0xdf, 0x1d, 0xdb, 0x83, 0xb3,
	0x41, 0x4f, 0x47, 0x50, 0xab, 0x71, 0x77, 0xd8, 0x28, 0xa4, 0x8b, 0x93, 0x51, 0xa3, 0x78, 0xf8,
	0xec, 0xaf, 0x4f, 0x2f, 0x3d, 0xf9, 0x29, 0xbe, 0xd8, 0x77, 0x82, 0xe9, 0x9b, 0x89, 0x17, 0x7f,
	0x62, 0xde, 0x24, 0xb8, 0xe6, 0x6f, 0xf0, 0x17, 0x2c, 0x27, 0x98, 0xbc, 0x91, 0xce, 0xc5, 0x0a,
	0x2e, 0x7e, 0xf3, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x11, 0x29, 0x45, 0x8f, 0x26, 0x13, 0x00,
	0x00,
}
