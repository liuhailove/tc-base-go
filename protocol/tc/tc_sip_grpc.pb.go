// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SIPClient is the client API for SIP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SIPClient interface {
	CreateSIPTrunk(ctx context.Context, in *CreateSIPTrunkRequest, opts ...grpc.CallOption) (*SIPTrunkInfo, error)
	ListSIPTrunk(ctx context.Context, in *ListSIPTrunkRequest, opts ...grpc.CallOption) (*ListSIPTrunkResponse, error)
	DeleteSIPTrunk(ctx context.Context, in *DeleteSIPTrunkRequest, opts ...grpc.CallOption) (*SIPTrunkInfo, error)
	CreateSIPDispatchRule(ctx context.Context, in *CreateSIPDispatchRuleRequest, opts ...grpc.CallOption) (*SIPDispatchRuleInfo, error)
	ListSIPDispatchRule(ctx context.Context, in *ListSIPDispatchRuleRequest, opts ...grpc.CallOption) (*ListSIPDispatchRuleResponse, error)
	DeleteSIPDispatchRule(ctx context.Context, in *DeleteSIPDispatchRuleRequest, opts ...grpc.CallOption) (*SIPDispatchRuleInfo, error)
	CreateSIPParticipant(ctx context.Context, in *CreateSIPParticipantRequest, opts ...grpc.CallOption) (*SIPParticipantInfo, error)
	SendSIPParticipantDTMF(ctx context.Context, in *SendSIPParticipantDTMFRequest, opts ...grpc.CallOption) (*SIPParticipantDTMFInfo, error)
	ListSIPParticipant(ctx context.Context, in *ListSIPParticipantRequest, opts ...grpc.CallOption) (*ListSIPParticipantResponse, error)
	DeleteSIPParticipant(ctx context.Context, in *DeleteSIPParticipantRequest, opts ...grpc.CallOption) (*SIPParticipantInfo, error)
}

type sIPClient struct {
	cc grpc.ClientConnInterface
}

func NewSIPClient(cc grpc.ClientConnInterface) SIPClient {
	return &sIPClient{cc}
}

func (c *sIPClient) CreateSIPTrunk(ctx context.Context, in *CreateSIPTrunkRequest, opts ...grpc.CallOption) (*SIPTrunkInfo, error) {
	out := new(SIPTrunkInfo)
	err := c.cc.Invoke(ctx, "/tc.SIP/CreateSIPTrunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sIPClient) ListSIPTrunk(ctx context.Context, in *ListSIPTrunkRequest, opts ...grpc.CallOption) (*ListSIPTrunkResponse, error) {
	out := new(ListSIPTrunkResponse)
	err := c.cc.Invoke(ctx, "/tc.SIP/ListSIPTrunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sIPClient) DeleteSIPTrunk(ctx context.Context, in *DeleteSIPTrunkRequest, opts ...grpc.CallOption) (*SIPTrunkInfo, error) {
	out := new(SIPTrunkInfo)
	err := c.cc.Invoke(ctx, "/tc.SIP/DeleteSIPTrunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sIPClient) CreateSIPDispatchRule(ctx context.Context, in *CreateSIPDispatchRuleRequest, opts ...grpc.CallOption) (*SIPDispatchRuleInfo, error) {
	out := new(SIPDispatchRuleInfo)
	err := c.cc.Invoke(ctx, "/tc.SIP/CreateSIPDispatchRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sIPClient) ListSIPDispatchRule(ctx context.Context, in *ListSIPDispatchRuleRequest, opts ...grpc.CallOption) (*ListSIPDispatchRuleResponse, error) {
	out := new(ListSIPDispatchRuleResponse)
	err := c.cc.Invoke(ctx, "/tc.SIP/ListSIPDispatchRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sIPClient) DeleteSIPDispatchRule(ctx context.Context, in *DeleteSIPDispatchRuleRequest, opts ...grpc.CallOption) (*SIPDispatchRuleInfo, error) {
	out := new(SIPDispatchRuleInfo)
	err := c.cc.Invoke(ctx, "/tc.SIP/DeleteSIPDispatchRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sIPClient) CreateSIPParticipant(ctx context.Context, in *CreateSIPParticipantRequest, opts ...grpc.CallOption) (*SIPParticipantInfo, error) {
	out := new(SIPParticipantInfo)
	err := c.cc.Invoke(ctx, "/tc.SIP/CreateSIPParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sIPClient) SendSIPParticipantDTMF(ctx context.Context, in *SendSIPParticipantDTMFRequest, opts ...grpc.CallOption) (*SIPParticipantDTMFInfo, error) {
	out := new(SIPParticipantDTMFInfo)
	err := c.cc.Invoke(ctx, "/tc.SIP/SendSIPParticipantDTMF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sIPClient) ListSIPParticipant(ctx context.Context, in *ListSIPParticipantRequest, opts ...grpc.CallOption) (*ListSIPParticipantResponse, error) {
	out := new(ListSIPParticipantResponse)
	err := c.cc.Invoke(ctx, "/tc.SIP/ListSIPParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sIPClient) DeleteSIPParticipant(ctx context.Context, in *DeleteSIPParticipantRequest, opts ...grpc.CallOption) (*SIPParticipantInfo, error) {
	out := new(SIPParticipantInfo)
	err := c.cc.Invoke(ctx, "/tc.SIP/DeleteSIPParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SIPServer is the server API for SIP service.
// All implementations must embed UnimplementedSIPServer
// for forward compatibility
type SIPServer interface {
	CreateSIPTrunk(context.Context, *CreateSIPTrunkRequest) (*SIPTrunkInfo, error)
	ListSIPTrunk(context.Context, *ListSIPTrunkRequest) (*ListSIPTrunkResponse, error)
	DeleteSIPTrunk(context.Context, *DeleteSIPTrunkRequest) (*SIPTrunkInfo, error)
	CreateSIPDispatchRule(context.Context, *CreateSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error)
	ListSIPDispatchRule(context.Context, *ListSIPDispatchRuleRequest) (*ListSIPDispatchRuleResponse, error)
	DeleteSIPDispatchRule(context.Context, *DeleteSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error)
	CreateSIPParticipant(context.Context, *CreateSIPParticipantRequest) (*SIPParticipantInfo, error)
	SendSIPParticipantDTMF(context.Context, *SendSIPParticipantDTMFRequest) (*SIPParticipantDTMFInfo, error)
	ListSIPParticipant(context.Context, *ListSIPParticipantRequest) (*ListSIPParticipantResponse, error)
	DeleteSIPParticipant(context.Context, *DeleteSIPParticipantRequest) (*SIPParticipantInfo, error)
	mustEmbedUnimplementedSIPServer()
}

// UnimplementedSIPServer must be embedded to have forward compatible implementations.
type UnimplementedSIPServer struct {
}

func (UnimplementedSIPServer) CreateSIPTrunk(context.Context, *CreateSIPTrunkRequest) (*SIPTrunkInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSIPTrunk not implemented")
}
func (UnimplementedSIPServer) ListSIPTrunk(context.Context, *ListSIPTrunkRequest) (*ListSIPTrunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSIPTrunk not implemented")
}
func (UnimplementedSIPServer) DeleteSIPTrunk(context.Context, *DeleteSIPTrunkRequest) (*SIPTrunkInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSIPTrunk not implemented")
}
func (UnimplementedSIPServer) CreateSIPDispatchRule(context.Context, *CreateSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSIPDispatchRule not implemented")
}
func (UnimplementedSIPServer) ListSIPDispatchRule(context.Context, *ListSIPDispatchRuleRequest) (*ListSIPDispatchRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSIPDispatchRule not implemented")
}
func (UnimplementedSIPServer) DeleteSIPDispatchRule(context.Context, *DeleteSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSIPDispatchRule not implemented")
}
func (UnimplementedSIPServer) CreateSIPParticipant(context.Context, *CreateSIPParticipantRequest) (*SIPParticipantInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSIPParticipant not implemented")
}
func (UnimplementedSIPServer) SendSIPParticipantDTMF(context.Context, *SendSIPParticipantDTMFRequest) (*SIPParticipantDTMFInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSIPParticipantDTMF not implemented")
}
func (UnimplementedSIPServer) ListSIPParticipant(context.Context, *ListSIPParticipantRequest) (*ListSIPParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSIPParticipant not implemented")
}
func (UnimplementedSIPServer) DeleteSIPParticipant(context.Context, *DeleteSIPParticipantRequest) (*SIPParticipantInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSIPParticipant not implemented")
}
func (UnimplementedSIPServer) mustEmbedUnimplementedSIPServer() {}

// UnsafeSIPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SIPServer will
// result in compilation errors.
type UnsafeSIPServer interface {
	mustEmbedUnimplementedSIPServer()
}

func RegisterSIPServer(s grpc.ServiceRegistrar, srv SIPServer) {
	s.RegisterService(&SIP_ServiceDesc, srv)
}

func _SIP_CreateSIPTrunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSIPTrunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIPServer).CreateSIPTrunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tc.SIP/CreateSIPTrunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIPServer).CreateSIPTrunk(ctx, req.(*CreateSIPTrunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SIP_ListSIPTrunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSIPTrunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIPServer).ListSIPTrunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tc.SIP/ListSIPTrunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIPServer).ListSIPTrunk(ctx, req.(*ListSIPTrunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SIP_DeleteSIPTrunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSIPTrunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIPServer).DeleteSIPTrunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tc.SIP/DeleteSIPTrunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIPServer).DeleteSIPTrunk(ctx, req.(*DeleteSIPTrunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SIP_CreateSIPDispatchRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSIPDispatchRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIPServer).CreateSIPDispatchRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tc.SIP/CreateSIPDispatchRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIPServer).CreateSIPDispatchRule(ctx, req.(*CreateSIPDispatchRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SIP_ListSIPDispatchRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSIPDispatchRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIPServer).ListSIPDispatchRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tc.SIP/ListSIPDispatchRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIPServer).ListSIPDispatchRule(ctx, req.(*ListSIPDispatchRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SIP_DeleteSIPDispatchRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSIPDispatchRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIPServer).DeleteSIPDispatchRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tc.SIP/DeleteSIPDispatchRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIPServer).DeleteSIPDispatchRule(ctx, req.(*DeleteSIPDispatchRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SIP_CreateSIPParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSIPParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIPServer).CreateSIPParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tc.SIP/CreateSIPParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIPServer).CreateSIPParticipant(ctx, req.(*CreateSIPParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SIP_SendSIPParticipantDTMF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSIPParticipantDTMFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIPServer).SendSIPParticipantDTMF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tc.SIP/SendSIPParticipantDTMF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIPServer).SendSIPParticipantDTMF(ctx, req.(*SendSIPParticipantDTMFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SIP_ListSIPParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSIPParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIPServer).ListSIPParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tc.SIP/ListSIPParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIPServer).ListSIPParticipant(ctx, req.(*ListSIPParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SIP_DeleteSIPParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSIPParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIPServer).DeleteSIPParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tc.SIP/DeleteSIPParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIPServer).DeleteSIPParticipant(ctx, req.(*DeleteSIPParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SIP_ServiceDesc is the grpc.ServiceDesc for SIP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SIP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tc.SIP",
	HandlerType: (*SIPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSIPTrunk",
			Handler:    _SIP_CreateSIPTrunk_Handler,
		},
		{
			MethodName: "ListSIPTrunk",
			Handler:    _SIP_ListSIPTrunk_Handler,
		},
		{
			MethodName: "DeleteSIPTrunk",
			Handler:    _SIP_DeleteSIPTrunk_Handler,
		},
		{
			MethodName: "CreateSIPDispatchRule",
			Handler:    _SIP_CreateSIPDispatchRule_Handler,
		},
		{
			MethodName: "ListSIPDispatchRule",
			Handler:    _SIP_ListSIPDispatchRule_Handler,
		},
		{
			MethodName: "DeleteSIPDispatchRule",
			Handler:    _SIP_DeleteSIPDispatchRule_Handler,
		},
		{
			MethodName: "CreateSIPParticipant",
			Handler:    _SIP_CreateSIPParticipant_Handler,
		},
		{
			MethodName: "SendSIPParticipantDTMF",
			Handler:    _SIP_SendSIPParticipantDTMF_Handler,
		},
		{
			MethodName: "ListSIPParticipant",
			Handler:    _SIP_ListSIPParticipant_Handler,
		},
		{
			MethodName: "DeleteSIPParticipant",
			Handler:    _SIP_DeleteSIPParticipant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tc_sip.proto",
}
